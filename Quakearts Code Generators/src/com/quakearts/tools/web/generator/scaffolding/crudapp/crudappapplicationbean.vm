package com.quakearts.webapp.beans;

import java.io.Serializable;
import java.util.Date;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Logger;
import javax.inject.Named;
import javax.faces.view.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;
import javax.faces.convert.DateTimeConverter;
#foreach($import in $util.getEnumImports($beanModels))import $import;
#end

@Named("${crudappBeanName}")
@ViewScoped
public class $crudappClassName implements Serializable {

	private static Logger log = Logger.getLogger(${crudappClassName}.class.getName());
	private String mode;
	private transient Converter timeStampConverter;
	private transient Converter localDateTimeConverter;
	
	public String getMode() {
		return mode;
	}
	
	public void setMode(String mode) {
		this.mode = mode;
	}
	
	public Converter getTimeStampConverter() {
		if(timeStampConverter == null){
			timeStampConverter = new TimeStampConverter();
			((TimeStampConverter)timeStampConverter).setPattern("dd/MM/yyyy");
		}
		return timeStampConverter;
	}
	
	public static class TimeStampConverter extends DateTimeConverter implements Serializable {
		@Override
		public Object getAsObject(FacesContext context, UIComponent component, String dateString) {
			Object result;
			try {
				result = super.getAsObject(context, component, dateString);
				if (result instanceof Date) {
					result = new java.sql.Timestamp(((Date) result).getTime());
				}
			} catch (ConverterException ex) {
				log.severe("Exception of type " + ex.getClass().getName()
						+ " was thrown. Message is " + ex.getMessage());
				return null;
			}
			return result;
		}

		@Override
		public String getAsString(FacesContext context, UIComponent component, Object dateObject) {
			String result = null;
			try {
				result = super.getAsString(context, component, dateObject);
			} catch (ConverterException ex) {
				return null;
			}
			return result;
		}
	}
	
	public Converter getLocalDateTimeConverter() {
		if(localDateTimeConverter == null){
			localDateTimeConverter = new LocalDateTimeConverter();
		}
		
		return localDateTimeConverter;
	}
	
	private static DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

	public static class LocalDateTimeConverter implements Converter {

		@Override
		public Object getAsObject(FacesContext context, UIComponent component, String value) {
			if(value == null)
				return null;
			
			return LocalDateTime.from(dateTimeFormatter.parse(value));
		}

		@Override
		public String getAsString(FacesContext context, UIComponent component, Object value) {
			if(!(value instanceof LocalDateTime))
				return null;
			
			return dateTimeFormatter.format((LocalDateTime) value);
		}
		
	}
#foreach($enumName in $util.getEnums($beanModels)) 

	public ${enumName}[] get${enumName}s() {
		return ${enumName}.values();
	}
#end
}
