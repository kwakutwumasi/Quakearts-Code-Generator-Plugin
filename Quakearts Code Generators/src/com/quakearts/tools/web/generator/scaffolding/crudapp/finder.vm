#set($stringElements=[])#foreach($element in $beanModel.beanElements)#if($element.string)#set($ignoreadd=${stringElements.add($element)})#end#end
package com.quakearts.webapp.beans;

import java.util.List;
import javax.inject.Inject;
import javax.inject.Singleton;
import com.quakearts.webapp.orm.DataStoreFactory;
import com.quakearts.webapp.orm.cdi.annotation.DataStoreFactoryHandle;
import com.quakearts.webapp.orm.query.criteria.CriteriaMap;
import ${beanModel.beanClass.canonicalName};
#if(!$stringElements.isEmpty())import static com.quakearts.webapp.orm.query.criteria.CriteriaMapBuilder.createCriteria;
#end
@Singleton
public class ${beanModel.beanClass.simpleName}Finder {	

	@Inject @DataStoreFactoryHandle
	private DataStoreFactory dataStoreFactory;

	public List<${beanModel.beanClass.simpleName}> findObjects(CriteriaMap criteria){
		return dataStoreFactory.getDataStore().find(${beanModel.beanClass.simpleName}.class).using(criteria).thenList();
	}
#set($id=$beanModel.idElement.id)#if($beanModel.idElement && !$beanModel.idElement.compositeId &&(${id.descriptor.propertyType.name} == "int" || ${id.descriptor.propertyType.name} == "java.lang.Integer" || ${id.descriptor.propertyType.name} == "long" || ${id.descriptor.propertyType.name} == "java.lang.Long" || ${id.descriptor.propertyType.name} == "java.lang.String"))

	public ${beanModel.beanClass.simpleName} getById(${id.descriptor.propertyType.simpleName} id){
		return dataStoreFactory.getDataStore().get(${beanModel.beanClass.simpleName}.class, id);
	}
#end
#if($stringElements.isEmpty())

	public List<${beanModel.beanClass.simpleName}> getAll(){
		return dataStoreFactory.getDataStore().list(${beanModel.beanClass.simpleName}.class);
	}
#else

	public List<${beanModel.beanClass.simpleName}> filterByText(String searchString){
		return dataStoreFactory.getDataStore().find(${beanModel.beanClass.simpleName}.class)
												.using(createCriteria()#if($stringElements.size()>1).requireAnyOfTheFollowing()#end

#foreach($element in $stringElements)													.property("${element.value}").mustBeLike(searchString)
#if(!$foreach.hasNext)												.finish())
											.thenList();
#end#end
	}
#end
}