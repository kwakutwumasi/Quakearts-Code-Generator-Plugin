package com.quakearts.webapp.beans;

#set($stringElements=[])#foreach($element in $beanModel.beanElements)#if($element.string)#set($ignoreadd=${stringElements.add($element)})#end#end
#if($stringElements.isEmpty())import java.io.Serializable;
#end
import java.util.List;
import java.util.ArrayList;
import javax.inject.Inject;
import javax.enterprise.context.Dependent;
#if(!$stringElements.isEmpty())import javax.faces.event.AjaxBehaviorEvent;
import javax.faces.context.FacesContext;
import com.quakearts.webapp.facelets.base.BaseBean;
#end
import ${beanModel.beanClass.canonicalName};

@Dependent
public class ${beanModel.beanClass.simpleName}DropdownHelper#if(!$stringElements.isEmpty()) extends BaseBean#else implements Serializable#end {
	
	@Inject
	private transient ${beanModel.beanClass.simpleName}Finder finder;
	
	private List<${beanModel.beanClass.simpleName}> foundItems;
	
#if($stringElements.isEmpty())	
#end	public List<${beanModel.beanClass.simpleName}> getFoundItems() {
#if($stringElements.isEmpty())		if(foundItems == null)
			foundItems = finder.getAll();
#end
    	return foundItems;
    }
    	
	private ${beanModel.beanClass.simpleName} ${util.reverseCamelCase($beanModel.beanClass.simpleName)};
	
	public ${beanModel.beanClass.simpleName} get${beanModel.beanClass.simpleName}(){
		if(${util.reverseCamelCase($beanModel.beanClass.simpleName)} == null){
			${util.reverseCamelCase($beanModel.beanClass.simpleName)} = new ${beanModel.beanClass.simpleName}();
			addToFoundItemsList(${util.reverseCamelCase($beanModel.beanClass.simpleName)});
		}
		
		return ${util.reverseCamelCase($beanModel.beanClass.simpleName)};
	}
	
	private boolean inCreateMode;
	
	public boolean isInCreateMode() {
		return inCreateMode;
	}

	public void setInCreateMode(boolean inCreateMode) {
		this.inCreateMode = inCreateMode;
	}

	public void addToFoundItemsList(${beanModel.beanClass.simpleName} ${beanModel.name}) {
		if(foundItems == null)
			foundItems = new ArrayList<>();
		
		foundItems.add(${beanModel.name});
	}
#if(!$stringElements.isEmpty())

	private String searchText;
	
	public String getSearchText() {
		return searchText;
	}
	
	public void setSearchText(String searchText) {
		this.searchText = searchText;
	}
	
	public void filterItems(AjaxBehaviorEvent event){
		if(searchText != null && !searchText.trim().isEmpty()){
			foundItems = finder.filterByText(searchText+"%");
			
			if(foundItems.isEmpty()) {
				addMessage("Not found","The search string returned no results",
					FacesContext.getCurrentInstance(), event.getComponent().getClientId());
			}
		}
	}
#end
}