package com.quakearts.webapp.beans;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.logging.Logger;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;
import javax.faces.convert.DateTimeConverter;
import javax.faces.event.ActionEvent;
import javax.faces.event.AjaxBehaviorEvent;
import org.hibernate.HibernateException;
import com.quakearts.webapp.facelets.base.BaseBean;
import com.quakearts.webapp.hibernate.HibernateBean;
import com.quakearts.webapp.hibernate.HibernateHelper;
#foreach($beanModelObj in $beanModels)import ${beanModelObj.beanClass.canonicalName};
#end#foreach($import in $util.getEnumImports($beanModels))import $import;
#end

@ManagedBean(name="${crudappBeanName}")
@ViewScoped
public class $crudappClassName {

	private static Logger log = Logger.getLogger(${crudappClassName}.class.getName());
	private String mode;
	private Converter converter;
	
	public String getMode() {
		return mode;
	}
	
	public void setMode(String mode) {
		this.mode = mode;
	}
	
	public Converter getConverter() {
		if(converter==null){
			converter = new TimeStampConverter();
			((TimeStampConverter)converter).setPattern("dd/MM/yyyy");
		}
		return converter;
	}
	
	public static class TimeStampConverter extends DateTimeConverter implements Serializable {
		@Override
		public Object getAsObject(FacesContext context, UIComponent component, String dateString) {
			Object result;
			try {
				result = super.getAsObject(context, component, dateString);
				if (result instanceof Date) {
					result = new java.sql.Timestamp(((Date) result).getTime());
				}
			} catch (ConverterException ex) {
				log.severe("Exception of type " + ex.getClass().getName()
						+ " was thrown. Message is " + ex.getMessage());
				return null;
			}
			return result;
		}

		@Override
		public String getAsString(FacesContext context, UIComponent component, Object dateObject) {
			String result = null;
			try {
				result = super.getAsString(context, component, dateObject);
			} catch (ConverterException ex) {
				return null;
			}
			return result;
		}
	}
#foreach($enumName in $util.getEnums($beanModels)) 

	public ${enumName}[] get${enumName}s() {
		return ${enumName}.values();
	}
#end

#foreach($beanModelObj in $beanModels)#set($id = $beanModelObj.idElement.id)#set($stringElements=[])#foreach($element in $beanModelObj.beanElements)#if($element.string)#set($ignoreadd=${stringElements.add($element)})#end#end
	public static class ${beanModelObj.beanClass.simpleName}Finder extends HibernateBean {
    	public List<${beanModelObj.beanClass.simpleName}> findObjects(HashMap<String, Serializable> parameters,QueryOrder...queryOrders) throws HibernateException{
    		return findObjects(${beanModelObj.beanClass.simpleName}.class, parameters, HibernateHelper.getCurrentSession(), queryOrders);
    	}
#if($beanModelObj.idElement && !$beanModelObj.idElement.compositId &&(${id.descriptor.propertyType.name} == "int" || ${id.descriptor.propertyType.name} == "java.lang.Integer" || ${id.descriptor.propertyType.name} == "long" || ${id.descriptor.propertyType.name} == "java.lang.Long" || ${id.descriptor.propertyType.name} == "java.lang.String"))
		public ${beanModelObj.beanClass.simpleName} getById(${id.descriptor.propertyType.simpleName} id){
			return HibernateHelper.getCurrentSession().get(${beanModelObj.beanClass.simpleName}.class,id);
		}
#end
#if($stringElements.isEmpty())
    	@SuppressWarnings("unchecked")
		public List<${beanModelObj.beanClass.simpleName}> getAll(){
			return HibernateHelper.getCurrentSession().createCriteria(${beanModelObj.beanClass.simpleName}.class).list();
		}
#else
    	@SuppressWarnings("unchecked")
		public List<${beanModelObj.beanClass.simpleName}> filterByText(String searchString){
			return HibernateHelper.getCurrentSession().createQuery("select a from ${beanModelObj.beanClass.name} a where "
    					+"#foreach($element in $stringElements)a.${element.value} like :${element.value} #if($foreach.hasNext) or #end#end")
    					#foreach($element in $stringElements).setString("${element.value}", "%" + searchString + "%")#if(!$foreach.hasNext).list();#end#end
		}
#end
    }
    
	public static class ${beanModelObj.beanClass.simpleName}Page extends BaseBean {
    	private ${beanModelObj.beanClass.simpleName} ${beanModelObj.name};	
    	
    	private $crudappClassName applicationBean;
    	
    	public ${beanModelObj.beanClass.simpleName}Page($crudappClassName applicationBean){
    		this.applicationBean = applicationBean;
    	}
    	
    	public ${beanModelObj.beanClass.simpleName} get${util.camelCase($beanModelObj.name)}() {
    		if(${beanModelObj.name}==null){
#if($beanModelObj.idElement && !$beanModelObj.idElement.compositId &&(${id.descriptor.propertyType.name} == "int" || ${id.descriptor.propertyType.name} == "java.lang.Integer" || ${id.descriptor.propertyType.name} == "long" || ${id.descriptor.propertyType.name} == "java.lang.Long" || ${id.descriptor.propertyType.name} == "java.lang.String"))				if(hasParameter("${beanModelObj.name}")){
    				set${util.camelCase($beanModelObj.name)}(finder.getById(#if(${id.descriptor.propertyType.name} == "int" || ${id.descriptor.propertyType.name} == "java.lang.Integer")getParameterInt("${beanModelObj.name}")#elseif(${id.descriptor.propertyType.name} == "long" || ${id.descriptor.propertyType.name} == "java.lang.Long")getParameterLong("${beanModelObj.name}")#elseif(${id.descriptor.propertyType.name} == "java.lang.String")getParameter("${beanModelObj.name}")#end));
    				applicationBean.setMode("read");
    			} else {
#end
    				${beanModelObj.name} = new ${beanModelObj.beanClass.simpleName}();
#if($beanModelObj.idElement && !$beanModelObj.idElement.compositId &&(${id.descriptor.propertyType.name} == "int" || ${id.descriptor.propertyType.name} == "java.lang.Integer" || ${id.descriptor.propertyType.name} == "long" || ${id.descriptor.propertyType.name} == "java.lang.Long" || ${id.descriptor.propertyType.name} == "java.lang.String"))				}
#end
    		}
    		
    		return ${beanModelObj.name};
    	}
    	
    	public void set${util.camelCase($beanModelObj.name)}(${beanModelObj.beanClass.simpleName} ${beanModelObj.name}) {
    		this.${beanModelObj.name} = ${beanModelObj.name};
    		if(${beanModelObj.name}!=null){
#foreach($element in $beanModelObj.beanElements)#if(!$element.knownInputType)#set($elementModel = $classModelMapping[${element.descriptor.propertyType.name}])#if($classModelMapping[${element.descriptor.propertyType.name}])
    			${elementModel.beanClass.simpleName} ${element.value} = ${beanModelObj.name}.get${util.camelCase(${element.value})}();
    			if(${element.value}!=null){
					applicationBean.get${element.descriptor.propertyType.simpleName}DropdownHelper().addToFoundItemsList(${element.value});
    			}
#end#end#end
    		}
    	}
    	
    	private List<${beanModelObj.beanClass.simpleName}> ${beanModelObj.name}List;
    	
    	public List<${beanModelObj.beanClass.simpleName}> get${util.camelCase($beanModelObj.name)}List(){
    		return ${beanModelObj.name}List;
    	}
    	
    	private ${beanModelObj.beanClass.simpleName}Finder finder = new ${beanModelObj.beanClass.simpleName}Finder();
    	
    	public void find${util.camelCase($beanModelObj.name)}(ActionEvent event){
    		HashMap<String, Serializable> parameters = new HashMap<>();
    		
#foreach($element in ${beanModelObj.beanElements})#if(!$element.collection && !$element.map && !$element.identity && !$element.nonFk)
    		if(${beanModelObj.name}.${element.descriptor.readMethod.name}()#if(${element.boolean})#else != #if($element.primitiveNumber)0#{else}null#if($element.descriptor.propertyType.name == "java.lang.String") && ! ${beanModelObj.name}.${element.descriptor.readMethod.name}().trim().isEmpty()#end#end#end){
    			parameters.put("${element.value}", #if($element.descriptor.propertyType.name == "java.lang.String")new HibernateBean.VariableString(${beanModelObj.name}.${element.descriptor.readMethod.name}())#else${beanModelObj.name}.${element.descriptor.readMethod.name}()#end);
    		}
#end#end
    		
    		try {
    			${beanModelObj.name}List = finder.findObjects(parameters);
    		} catch (HibernateException e) {
    			addError("Search error", "An error occured while searching for ${util.splitCamelCase($beanModelObj.beanClass.simpleName)}", FacesContext.getCurrentInstance());
    			log.severe("Exception of type " + e.getClass().getName() + " was thrown. Message is " + e.getMessage()
    					+ ". Exception occured whiles searching for ${beanModelObj.beanClass.simpleName}");
    		}		
    	}
    	
    	public void remove${util.camelCase($beanModelObj.name)}(ActionEvent event){
    		if(${beanModelObj.name}!=null && ${beanModelObj.name}List!=null){
    			${beanModelObj.name}List.remove(${beanModelObj.name});
    		}
    	}
	}
	
	private ${beanModelObj.beanClass.simpleName}Page ${beanModelObj.name}Page;
	
	public ${beanModelObj.beanClass.simpleName}Page get${util.camelCase($beanModelObj.name)}Page(){
		if(${beanModelObj.name}Page == null)
			${beanModelObj.name}Page = new ${beanModelObj.beanClass.simpleName}Page(this);
		
		return ${beanModelObj.name}Page;
	}
	
	public static class ${beanModelObj.beanClass.simpleName}DropdownHelper implements Serializable{
		private ${beanModelObj.beanClass.simpleName}Finder finder = new ${beanModelObj.beanClass.simpleName}Finder();
		
		private List<${beanModelObj.beanClass.simpleName}> foundItems;
#if($stringElements.isEmpty())		@SuppressWarnings("unchecked")
#end		public List<${beanModelObj.beanClass.simpleName}> getFoundItems() {
#if($stringElements.isEmpty())			if(foundItems == null)
				foundItems = finder.getAll();
#end
    		return foundItems;
    	}
    	
		private ${beanModelObj.beanClass.simpleName} ${util.reverseCamelCase($beanModelObj.beanClass.simpleName)};
		
		public ${beanModelObj.beanClass.simpleName} get${beanModelObj.beanClass.simpleName}(){
			if(${util.reverseCamelCase($beanModelObj.beanClass.simpleName)} == null){
				${util.reverseCamelCase($beanModelObj.beanClass.simpleName)} = new ${beanModelObj.beanClass.simpleName}();
				addToFoundItemsList(${util.reverseCamelCase($beanModelObj.beanClass.simpleName)});
			}
			
			return ${util.reverseCamelCase($beanModelObj.beanClass.simpleName)};
		}
		
    	private boolean inCreateMode;
    	
    	public boolean isInCreateMode() {
    		return inCreateMode;
    	}
    
    	public void setInCreateMode(boolean inCreateMode) {
    		this.inCreateMode = inCreateMode;
    	}
    
    	public void addToFoundItemsList(${beanModelObj.beanClass.simpleName} ${beanModelObj.name}) {
			if(foundItems==null)
				foundItems = new ArrayList<>();
    		
			foundItems.add(${beanModelObj.name});
    	}
    	
#if(!$stringElements.isEmpty())
    	private String searchText;
    	
    	public String getSearchText() {
    		return searchText;
    	}
    	
    	public void setSearchText(String searchText) {
    		this.searchText = searchText;
    	}
    	
    	public void filterItems(AjaxBehaviorEvent event){
    		if(searchText !=null && !searchText.trim().isEmpty()){
    			foundItems = finder.filterByText(searchText);
    		}
    	}
#end
	}
	
	private ${beanModelObj.beanClass.simpleName}DropdownHelper ${util.reverseCamelCase($beanModelObj.beanClass.simpleName)}DropdownHelper;
	
	public ${beanModelObj.beanClass.simpleName}DropdownHelper get${beanModelObj.beanClass.simpleName}DropdownHelper(){
		if(${util.reverseCamelCase($beanModelObj.beanClass.simpleName)}DropdownHelper == null)
			${util.reverseCamelCase($beanModelObj.beanClass.simpleName)}DropdownHelper = new ${beanModelObj.beanClass.simpleName}DropdownHelper();
		
		return ${util.reverseCamelCase($beanModelObj.beanClass.simpleName)}DropdownHelper;
	}
	
#end
}
