package com.quakearts.webapp.beans;

import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.logging.Logger;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;
import javax.faces.convert.DateTimeConverter;
import javax.faces.event.ActionEvent;
import javax.faces.event.AjaxBehaviorEvent;
import org.hibernate.HibernateException;
import com.quakearts.webapp.facelets.tag.BaseBean;
import com.quakearts.webapp.hibernate.HibernateBean;
import com.quakearts.webapp.hibernate.HibernateHelper;
#foreach($beanModelObj in $beanModels)import ${beanModelObj.beanClass.name};
#end

@ManagedBean(name="crudapp")
@ViewScoped
public class CRUDApplicationBean extends BaseBean {

	private static Logger log = Logger.getLogger(CRUDApplicationBean.class.getName());
	private String mode;
	private Converter converter;
	
	public String getMode() {
		return mode;
	}
	
	public void setMode(String mode) {
		this.mode = mode;
	}
	
	public Converter getConverter() {
		if(converter==null){
			converter = new TimeStampConverter();
			((TimeStampConverter)converter).setPattern("dd/MM/yyyy");
		}
		return converter;
	}
	
	public static class TimeStampConverter extends DateTimeConverter implements Serializable {
		@Override
		public Object getAsObject(FacesContext context, UIComponent component, String dateString) {
			Object result;
			try {
				result = super.getAsObject(context, component, dateString);
				if (result instanceof Date) {
					//make it a Timestamp, because that is what jBPM will make of it anyway
					result = new java.sql.Timestamp(((Date) result).getTime());
				}
			} catch (ConverterException ex) {
				log.severe("Exception of type " + ex.getClass().getName()
						+ " was thrown. Message is " + ex.getMessage());
				return null;
			}
			return result;
		}

		@Override
		public String getAsString(FacesContext context, UIComponent component, Object dateObject) {
			String result = null;
			try {
				result = super.getAsString(context, component, dateObject);
			} catch (ConverterException ex) {
				return null;
			}
			return result;
		}
	}
	
#foreach($beanModelObj in $beanModels)#set($id = $beanModelObj.generatorProperties["model.id"])
	private ${beanModelObj.beanClass.simpleName} ${beanModelObj.name};	

	public ${beanModelObj.beanClass.simpleName} get${util.camelCase($beanModelObj.name)}() {
		if(${beanModelObj.name}==null){
#if($beanModel.generatorProperties["model.id"]&&(${id.descriptor.propertyType.name} == "int" || ${id.descriptor.propertyType.name} == "java.lang.Integer" || ${id.descriptor.propertyType.name} == "long" || ${id.descriptor.propertyType.name} == "java.lang.Long" || ${id.descriptor.propertyType.name} == "java.lang.String"))			if(hasParameter("id")){
				${beanModelObj.name} = HibernateHelper.getCurrentSession().get(${beanModelObj.beanClass.simpleName}.class,#if(${id.descriptor.propertyType.name} == "int" || ${id.descriptor.propertyType.name} == "java.lang.Integer")getParameterInt("id")#elseif(${id.descriptor.propertyType.name} == "long" || ${id.descriptor.propertyType.name} == "java.lang.Long")getParameterLong("id")#elseif(${id.descriptor.propertyType.name} == "java.lang.String")getParameter("id")#end);
				mode="read";
			} else {
#end
				${beanModelObj.name} = new ${beanModelObj.beanClass.simpleName}();
#if($beanModel.generatorProperties["model.id"]&&(${id.descriptor.propertyType.name} == "int" || ${id.descriptor.propertyType.name} == "java.lang.Integer" || ${id.descriptor.propertyType.name} == "long" || ${id.descriptor.propertyType.name} == "java.lang.Long" || ${id.descriptor.propertyType.name} == "java.lang.String"))			}
#end
		}
		
		return ${beanModelObj.name};
	}
	
	public void set${util.camelCase($beanModelObj.name)}(${beanModelObj.beanClass.simpleName} ${beanModelObj.name}) {
		this.${beanModelObj.name} = ${beanModelObj.name};
		if(${beanModelObj.name}!=null){
#foreach($element in $beanModelObj.beanElements)#if(!$element.knownInputType)#set($elementModel = $classModelMapping[${element.descriptor.propertyType.name}])#if($classModelMapping[${element.descriptor.propertyType.name}])
			${elementModel.beanClass.simpleName} ${element.value} = ${beanModelObj.name}.get${util.camelCase(${element.value})}();
			if(${element.value}!=null){
				found${util.camelCase($elementModel.name)}Items = new ArrayList<>();
				found${util.camelCase($elementModel.name)}Items.add(${element.value});
			}
#end#end#end
		}
	}
	
	private List<${beanModelObj.beanClass.simpleName}> ${beanModelObj.name}List;
	
	public List<${beanModelObj.beanClass.simpleName}> get${util.camelCase($beanModelObj.name)}List(){
		return ${beanModelObj.name}List;
	}
	
	private class ${beanModelObj.beanClass.simpleName}Finder extends HibernateBean {
    	private List<${beanModelObj.beanClass.simpleName}> findObjects(HashMap<String, Serializable> parameters,QueryOrder...queryOrders) throws HibernateException, IOException{
    		return findObjects(${beanModelObj.beanClass.simpleName}.class, parameters, HibernateHelper.getCurrentSession(), queryOrders);
    	}
    }
	
	public void find${util.camelCase($beanModelObj.name)}(ActionEvent event){
		${beanModelObj.beanClass.simpleName}Finder finder = new ${beanModelObj.beanClass.simpleName}Finder();
		HashMap<String, Serializable> parameters = new HashMap<>();
		
#foreach($element in ${beanModelObj.beanElements})#if(!$element.collection && !$element.map && !$element.identity)
		if(${beanModelObj.name}.${element.descriptor.readMethod.name}()#if(${element.boolean})#else != #if($element.primitiveNumber)0#{else}null#if($element.descriptor.propertyType.name == "java.lang.String") && ! ${beanModelObj.name}.${element.descriptor.readMethod.name}().trim().isEmpty()#end#end#end){
			parameters.put("${element.value}", #if($element.descriptor.propertyType.name == "java.lang.String")new HibernateBean.VariableString(${beanModelObj.name}.${element.descriptor.readMethod.name}())#else${beanModelObj.name}.${element.descriptor.readMethod.name}()#end);
		}
#end#end
		
		try {
			${beanModelObj.name}List = finder.findObjects(parameters);
		} catch (HibernateException | IOException e) {
			addError("Search error", "An error occured while searching for ${beanModelObj.beanClass.simpleName}", FacesContext.getCurrentInstance());
		}		
	}
	
	public void remove${util.camelCase($beanModelObj.name)}(ActionEvent event){
		if(${beanModelObj.name}!=null && ${beanModelObj.name}List!=null){
			${beanModelObj.name}List.remove(${beanModelObj.name});
		}
	}
	
#set($stringElements=[])#foreach($element in $beanModelObj.beanElements)#if($element.string)#set($ignoreadd=${stringElements.add($element)})#end#end	private List<${beanModelObj.beanClass.simpleName}> found${util.camelCase($beanModelObj.name)}Items;
#if($stringElements.isEmpty())	@SuppressWarnings("unchecked")
#end	public List<${beanModelObj.beanClass.simpleName}> getFound${util.camelCase($beanModelObj.name)}Items() {
#if($stringElements.isEmpty())		found${util.camelCase($beanModelObj.name)}Items = HibernateHelper.getCurrentSession().createCriteria(${beanModelObj.beanClass.simpleName}.class).list();
#end
		return found${util.camelCase($beanModelObj.name)}Items;
	}
	
	private boolean in${util.camelCase($beanModelObj.name)}CreateMode;
	
	public boolean isIn${util.camelCase($beanModelObj.name)}CreateMode() {
		return in${util.camelCase($beanModelObj.name)}CreateMode;
	}

	public void setIn${util.camelCase($beanModelObj.name)}CreateMode(boolean inCreateMode) {
		in${util.camelCase($beanModelObj.name)}CreateMode = inCreateMode;
	}

	public void create${util.camelCase($beanModelObj.name)}AddToList(ActionEvent event) {
		HibernateHelper.getCurrentSession().save(get${util.camelCase($beanModelObj.name)}());
		found${util.camelCase($beanModelObj.name)}Items = new ArrayList<>();
		found${util.camelCase($beanModelObj.name)}Items.add(get${util.camelCase($beanModelObj.name)}());
		in${util.camelCase($beanModelObj.name)}CreateMode = false;
	}
	
#if(!$stringElements.isEmpty())
	private String ${beanModelObj.name}SearchText;
	
	public String get${util.camelCase($beanModelObj.name)}SearchText() {
		return ${beanModelObj.name}SearchText;
	}
	
	public void set${util.camelCase($beanModelObj.name)}SearchText(String ${beanModelObj.name}SearchText) {
		this.${beanModelObj.name}SearchText = ${beanModelObj.name}SearchText;
	}
	
	@SuppressWarnings("unchecked")
	public void filter${util.camelCase($beanModelObj.name)}Items(AjaxBehaviorEvent event){
		if(!isEmpty(${beanModelObj.name}SearchText)){
			found${util.camelCase($beanModelObj.name)}Items = HibernateHelper.getCurrentSession().createQuery("select a from ${beanModelObj.beanClass.name} a where "
					+"#foreach($element in $stringElements)a.${element.value} like :${element.value} #if($foreach.hasNext) or #end#end")
					#foreach($element in $stringElements).setString("${element.value}", "%" + ${beanModelObj.name}SearchText + "%")#if(!$foreach.hasNext).list();
#end#end
		}
	}
#end
#end
	
	private boolean isEmpty(String text){
		return text ==null||text.trim().isEmpty();
	}
}
