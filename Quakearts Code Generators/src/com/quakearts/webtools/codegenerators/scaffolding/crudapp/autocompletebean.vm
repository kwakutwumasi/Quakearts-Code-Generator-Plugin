package com.quakearts.webapp.beans;

import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.event.AjaxBehaviorEvent;
import com.quakearts.webapp.hibernate.HibernateHelper;
#foreach($beanModelObj in $beanModels)import ${beanModelObj.beanClass.name};
#{end}

@ManagedBean(name="autocomplete")
@ViewScoped
public class AutoCompleteBean {
#foreach($beanModelObj in $beanModels)#set($stringElements=[])#foreach($element in $beanModelObj.beanElements)#if($element.string)#set($ignoreadd=${stringElements.add($element)})#{end}#{end}
	
	private String ${beanModelObj.name}SearchText;
	private List<${beanModelObj.beanClass.simpleName}> found${util.camelCase($beanModelObj.name)}Items;
	
	public String get${beanModelObj.name}SearchText() {
		return ${beanModelObj.name}SearchText;
	}
	
	public void set${util.camelCase($beanModelObj.name)}SearchText(String ${beanModelObj.name}SearchText) {
		this.${beanModelObj.name}SearchText = ${beanModelObj.name}SearchText;
	}

#if($stringElements.isEmpty())	@SuppressWarnings("unchecked")#end	
	public List<${beanModelObj.beanClass.simpleName}> getFound${util.camelCase($beanModelObj.name)}Items() {
#if($stringElements.isEmpty())		found${util.camelCase($beanModelObj.name)}Items = HibernateHelper.getCurrentSession().createCriteria(${beanModelObj.beanClass.simpleName}.class).list();
#{end}
		return found${util.camelCase($beanModelObj.name)}Items;
	}
	
#if(!$stringElements.isEmpty())	@SuppressWarnings("unchecked")#end	
	public void filter${util.camelCase($beanModelObj.name)}Items(AjaxBehaviorEvent event){
#if(!$stringElements.isEmpty())		if(!isEmpty(${beanModelObj.name}SearchText)){
			found${util.camelCase($beanModelObj.name)}Items = HibernateHelper.getCurrentSession().createQuery("select a from ${beanModelObj.beanClass.name} a where "
					+"#foreach($element in $stringElements)a.${element.value} like :${element.value} #if($foreach.hasNext) or #{end}#{end}")
					#foreach($element in $stringElements).setString("${element.value}", "%" + ${beanModelObj.name}SearchText + "%")#if(!$foreach.hasNext).list();
#{end}#{end}
		}
#end
	}
#end
	
	private boolean isEmpty(String text){
		return text ==null||text.trim().isEmpty();
	}
}
